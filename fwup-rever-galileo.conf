# Revert Firmware configuration file for the Intel Galileo Gen 1 or 2

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | p0: EFI partition (FAT16)  |
# +----------------------------+
# | p1*: Rootfs A (squashfs)   |
# +----------------------------+
# | p1*: Rootfs B (squashfs)   |
# +----------------------------+
# | p2: Application (FAT32)    |
# +----------------------------+
#
# The p1 partition points to whichever of Rootfs A or B that
# is active.
#
# The image is sized to be less than 1 GB so that it fits on
# nearly any SDCard around. If you have a larger SDCard and
# need more space, feel free to bump the partition sizes
# below.

define(BOOT_PART_OFFSET, 1)
define(BOOT_PART_COUNT, 204800)

# Let the rootfs have room to grow up to 256 MiB
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 524288)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application data partition (10 GiB). This can be enlarged
# to fill the entire volume.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 20971520)

# Firmware metadata
    meta-product = "Nerves Firmware"
    meta-description = ""
    meta-version = ${NERVES_SDK_VERSION}
    meta-platform = "galileo"
    meta-architecture = "x86"
    meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
    file-resource startup.nsh {
        host-path = "${NERVES_SYSTEM}/images/efi-part/startup.nsh"
    }
file-resource bootx64.efi {
    host-path = "${NERVES_SYSTEM}/images/efi-part/EFI/BOOT/bootx64.efi"
}
file-resource grub.cfg {
    host-path = "${NERVES_SYSTEM}/images/efi-part/EFI/BOOT/grub.cfg"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
            boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
# partition 3 is unused
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
            boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
    }
# partition 3 is unused
}

task revert.b {
# This task upgrades the A partition
    require-partition1-offset = ${ROOTFS_B_PART_OFFSET}

# Since the upgrade won't run until it has been finalized, it's ok
# to write data as it is read.
    verify-on-the-fly = true

    on-finish {
# Switch over to boot the new firmware
        mbr_write(mbr-a)
    }

    on-error {
    }
}

task upgrade.a {
# This task upgrades the B partition
    require-partition1-offset = ${ROOTFS_A_PART_OFFSET}

# Since the upgrade won't run until it has been finalized, it's ok
# to write data as it is read.
    verify-on-the-fly = true

    on-finish {
# Switch over to boot the new firmware
        mbr_write(mbr-b)
    }

    on-error {
    }
}
